readmeJP

React=仮想DOM
従来のDOMを手動で更新する方法はスケーラビリティで劣る

Reactはアプリケーションのビュー部分に特化している
（アプリの構造やサーバーの通信などは感知しない）

サンプル
https://www.oreilly.co.jp/books/9784873117195/

第I部 基礎

1章 イントロダクション
    1.1　背景
従来のwebアプリはPHPなどのサーバーサイドレンダリング主流
→JS側でDOM制御、しかし複雑化
Reactは本質的に状態機械（State Machine）であり、絶えず変化する複雑な状態を扱う、下記2点のみ責任を負う
・DOMの更新
・イベントの反応
ReactはMVCのViewのみを扱うと言える
ReactはDOMが重いため仮想DOMというレンダリングシステムを持つ
多くのゲームエンジンと同様に、render()を中心に作られている
→現在の状態のスナップショットを元に仮想的なページを構成し、更新があれば新たに構築する
（実際にはReactの優れたアルゴリズムでDOMを更新する、
差分のみ更新するので、重いリフロー（レイアウト再構成）や不要なDOMの更新はされないので軽い）
またReactは単一のイベントハンドラで全てのイベントを監視するのでパフォーマンスがいい
    1.2　本書の構成
        1.2.1　第I部 基礎
        1.2.2　第II部 応用
        1.2.3　第III部 ツール
        1.2.4　第IV部 実践

2章 JSX
    2.1 JSXとは？
関心の分離（Separation of concerns）を実現する為、Reactではコンポーネントを使う←→テンプレートと表示ロジックで分離

コンポーネントはマークアップとコードが結びついた物で、Reactの中心概念

またReactではJSXというHTMLに似たマークアップ言語を使用出来る
ReactでJSXを使う利点
・HTMLと同様の方法でツリーをマークアップ出来る
・セマンティックな記述が出来る
・アプリの構造が可視化される
・Reactの内部表現（ReaactElement）が抽象化される
・マークアップとそれを生成するコードが一か所にまとまる
・最終的にJavaScriptに変換される


